// This file is generated automatically by Next.js
// Do not edit this file manually
// This file validates that all pages and layouts export the correct types

import type { AppRoutes, LayoutRoutes, ParamMap, AppRouteHandlerRoutes } from "./routes.js"
import type { ResolvingMetadata, ResolvingViewport } from "next/dist/lib/metadata/types/metadata-interface.js"
import type { NextRequest } from 'next/server.js'

type AppPageConfig<Route extends AppRoutes = AppRoutes> = {
  default: React.ComponentType<{ params: Promise<ParamMap[Route]> } & any> | ((props: { params: Promise<ParamMap[Route]> } & any) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type LayoutConfig<Route extends LayoutRoutes = LayoutRoutes> = {
  default: React.ComponentType<LayoutProps<Route>> | ((props: LayoutProps<Route>) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type RouteHandlerConfig<Route extends AppRouteHandlerRoutes = AppRouteHandlerRoutes> = {
  GET?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  POST?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  PUT?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  PATCH?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  DELETE?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  HEAD?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  OPTIONS?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
}


// Validate ../../src/app/create-donation/page.tsx
{
  const handler = {} as typeof import("../../src/app/create-donation/page.js")
  handler satisfies AppPageConfig<"/create-donation">
}

// Validate ../../src/app/customers/page.tsx
{
  const handler = {} as typeof import("../../src/app/customers/page.js")
  handler satisfies AppPageConfig<"/customers">
}

// Validate ../../src/app/dashboard/page.tsx
{
  const handler = {} as typeof import("../../src/app/dashboard/page.js")
  handler satisfies AppPageConfig<"/dashboard">
}

// Validate ../../src/app/login/page.tsx
{
  const handler = {} as typeof import("../../src/app/login/page.js")
  handler satisfies AppPageConfig<"/login">
}

// Validate ../../src/app/page.tsx
{
  const handler = {} as typeof import("../../src/app/page.js")
  handler satisfies AppPageConfig<"/">
}

// Validate ../../src/app/staff/page.tsx
{
  const handler = {} as typeof import("../../src/app/staff/page.js")
  handler satisfies AppPageConfig<"/staff">
}

// Validate ../../src/app/sync/page.tsx
{
  const handler = {} as typeof import("../../src/app/sync/page.js")
  handler satisfies AppPageConfig<"/sync">
}

// Validate ../../src/app/transactions/page.tsx
{
  const handler = {} as typeof import("../../src/app/transactions/page.js")
  handler satisfies AppPageConfig<"/transactions">
}

// Validate ../../src/app/api/auth/logout/route.ts
{
  const handler = {} as typeof import("../../src/app/api/auth/logout/route.js")
  handler satisfies RouteHandlerConfig<"/api/auth/logout">
}

// Validate ../../src/app/api/auth/me/route.ts
{
  const handler = {} as typeof import("../../src/app/api/auth/me/route.js")
  handler satisfies RouteHandlerConfig<"/api/auth/me">
}

// Validate ../../src/app/api/auth/route.ts
{
  const handler = {} as typeof import("../../src/app/api/auth/route.js")
  handler satisfies RouteHandlerConfig<"/api/auth">
}

// Validate ../../src/app/api/auth/send-otp/route.ts
{
  const handler = {} as typeof import("../../src/app/api/auth/send-otp/route.js")
  handler satisfies RouteHandlerConfig<"/api/auth/send-otp">
}

// Validate ../../src/app/api/auth/verify-otp/route.ts
{
  const handler = {} as typeof import("../../src/app/api/auth/verify-otp/route.js")
  handler satisfies RouteHandlerConfig<"/api/auth/verify-otp">
}

// Validate ../../src/app/api/customers/route.ts
{
  const handler = {} as typeof import("../../src/app/api/customers/route.js")
  handler satisfies RouteHandlerConfig<"/api/customers">
}

// Validate ../../src/app/api/dashboard/metrics/route.ts
{
  const handler = {} as typeof import("../../src/app/api/dashboard/metrics/route.js")
  handler satisfies RouteHandlerConfig<"/api/dashboard/metrics">
}

// Validate ../../src/app/api/staff/[id]/route.ts
{
  const handler = {} as typeof import("../../src/app/api/staff/[id]/route.js")
  handler satisfies RouteHandlerConfig<"/api/staff/[id]">
}

// Validate ../../src/app/api/staff/route.ts
{
  const handler = {} as typeof import("../../src/app/api/staff/route.js")
  handler satisfies RouteHandlerConfig<"/api/staff">
}

// Validate ../../src/app/api/sync/mywell/route.ts
{
  const handler = {} as typeof import("../../src/app/api/sync/mywell/route.js")
  handler satisfies RouteHandlerConfig<"/api/sync/mywell">
}

// Validate ../../src/app/api/sync/status/route.ts
{
  const handler = {} as typeof import("../../src/app/api/sync/status/route.js")
  handler satisfies RouteHandlerConfig<"/api/sync/status">
}

// Validate ../../src/app/api/transactions/[id]/refund/route.ts
{
  const handler = {} as typeof import("../../src/app/api/transactions/[id]/refund/route.js")
  handler satisfies RouteHandlerConfig<"/api/transactions/[id]/refund">
}

// Validate ../../src/app/api/transactions/route.ts
{
  const handler = {} as typeof import("../../src/app/api/transactions/route.js")
  handler satisfies RouteHandlerConfig<"/api/transactions">
}





// Validate ../../src/app/layout.tsx
{
  const handler = {} as typeof import("../../src/app/layout.js")
  handler satisfies LayoutConfig<"/">
}
